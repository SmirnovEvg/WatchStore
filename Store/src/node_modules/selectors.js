import R from 'ramda'

export const getWatchById = (state, id) => R.prop(id, state.watches)

export const getActiveCategoryId = ownProps => R.path(['params', 'id'], ownProps)

export const getWatches = (state, ownProps) => {
  const activeCategoryId = getActiveCategoryId(ownProps)
    const applySearch = item => R.contains(
      state.watchesPage.search.toUpperCase(),
      R.prop('name', item)
    )
    
    const applyCategory = item => R.equals(
      getActiveCategoryId(ownProps),
      R.prop('categoryId', item)
    )
    

    const watches = R.compose(
      R.filter(applySearch),
      R.when(R.always(activeCategoryId), R.filter(applyCategory)),
      R.map(id => getWatchById(state, id))
    )(state.watchesPage.ids)
    
  
    return watches
  }
  

  export const getTotalBasketCount = state => R.length(state.basket)

  export const getTotalBasketPrice = state => {
    const totalPrice = R.compose(
      R.sum,
      R.pluck('price'),
      R.map(id => getWatchById(state, id))
    )(state.basket)
  
    return totalPrice
  }

export const getCategories = state => R.values(state.categories)

export const getBasketWatchesWithCount = state => {
  const watchCount = id => R.compose(
    R.length,
    R.filter(basketId => R.equals(id, basketId))
  )(state.basket)
  const watchWithCount = watch => R.assoc('count', watchCount(watch.id), watch)

  const uniqueIds = R.uniq(state.basket)
  const watches = R.compose(
    R.map(watchWithCount),
    R.map(id => getWatchById(state, id))
  )(uniqueIds)

  return watches
}

